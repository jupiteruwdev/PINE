name: CD
on:
  push:
    branches: [staging, main]
env:
  IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT }}/core-service
  ETH_RPC_MAINNET: ${{ secrets.ETH_RPC_MAINNET }}
  ETH_RPC_RINKEBY: ${{ secrets.ETH_RPC_RINKEBY }}
  MORALIS_API_KEY: ${{ secrets.MORALIS_API_KEY }}
  NFTBANK_API_KEY: ${{ secrets.NFTBANK_API_KEY }}
  OPENSEA_API_KEY: ${{ secrets.OPENSEA_API_KEY }}
  ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
  GEMXYZ_API_KEY: ${{ secrets.GEMXYZ_API_KEY }}
  ALCHEMY_API_MAINNET_URL: ${{ secrets.ALCHEMY_API_MAINNET_URL }}
  ALCHEMY_API_RINKEBY_URL: ${{ secrets.ALCHEMY_API_RINKEBY_URL }}
  SUBGRAPH_API_MAINNET_URL: ${{ secrets.SUBGRAPH_API_MAINNET_URL }}
  SUBGRAPH_API_RINKEBY_URL: ${{ secrets.SUBGRAPH_API_RINKEBY_URL }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  TESTS_WALLET_ADDRESS: ${{ secrets.TESTS_WALLET_ADDRESS }}
jobs:
  deploy:
    name: Build/Test/Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Authenticate Google Cloud
        id: gcloud
        uses: google-github-actions/auth@v0
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACC }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.gcloud.outputs.access_token }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build test target
        uses: docker/build-push-action@v2
        with:
          build-args: BUILD_NUMBER=${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          load: true
          push: false
          tags: ${{ env.IMAGE_NAME }}:test-${{ github.sha }}
          target: test
      - name: Run tests
        run: IMAGE_TAG=test-${{ github.sha }} docker-compose -f docker-compose.test.yml up --exit-code-from app
      - name: Set metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short,priority=1000,suffix=${{ endsWith(github.ref, github.event.repository.default_branch) && '' || format('-{0}', github.ref_name) }}
            type=raw,value=latest,suffix=${{ endsWith(github.ref, github.event.repository.default_branch) && '' || format('-{0}', github.ref_name) }}
      - name: Build release target
        uses: docker/build-push-action@v2
        with:
          build-args: BUILD_NUMBER=${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          target: release
      - name: Deploy
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT }}
          services=$(gcloud run services list --platform managed --filter="metadata.labels.ref=${{ github.ref_name }}" | awk 'NR >= 2 {print $2}' | sed -n -e 'H;${x;s/\n/,/g;s/^,//;p;}')
          for service in $(echo $services | sed "s/,/ /g")
          do
            region=$(gcloud run services list --platform managed --filter=metadata.name=$service | awk 'NR == 2 {print $3}')
            gcloud run deploy $service --image ${{ fromJSON(steps.meta.outputs.json).tags[0] }} --platform managed --region $region
          done
  notify:
    name: Notify
    needs: [deploy]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: andrewscwei/slack-action@v1.0.0
        with:
          success-prefix: ðŸŒ²
          success: ${{ needs.deploy.result == 'success' }}
          webhook-url: ${{ secrets.SLACK_DEVOPS_WEBHOOK_URL }}
