on:
  workflow_call:
    inputs:
      push:
        default: false
        description: Specifies if the built Docker image should be pushed to remote registry
        required: false
        type: boolean
      image_name:
        default: image
        description: Specifies the Docker image name
        required: true
        type: string
      use_prod_apis:
        default: false
        description: Specifies whether production environment should be used for external APIs and services (i.e. database, subgraph, etc)
        required: false
        type: string
      checkout_ref:
        default: ''
        description: The ref argument provided to the checkout action
        required: false
        type: string
    outputs:
      image:
        description: The built Docker image
        value: ${{ jobs.default.outputs.image }}
env:
  ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
  ALCHEMY_API_MAINNET_URL: ${{ secrets.ALCHEMY_API_MAINNET_URL }}
  ALCHEMY_API_RINKEBY_URL: ${{ secrets.ALCHEMY_API_RINKEBY_URL }}
  ETH_RPC_MAINNET: ${{ secrets.ETH_RPC_MAINNET }}
  ETH_RPC_RINKEBY: ${{ secrets.ETH_RPC_RINKEBY }}
  GEMXYZ_API_KEY: ${{ secrets.GEMXYZ_API_KEY }}
  LUNARCRUSH_API_KEY: ${{ secrets.LUNARCRUSH_API_KEY }}
  LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
  MONGO_URI: ${{ inputs.use_prod_apis && secrets.MONGO_URI || secrets.MONGO_URI_STAGING }}
  WORKER_URL: ${{ inputs.use_prod_apis && secrets.WORKER_URL || secrets.WORKER_URL_STAGING }}
  MORALIS_API_KEY: ${{ secrets.MORALIS_API_KEY }}
  NFTBANK_API_KEY: ${{ secrets.NFTBANK_API_KEY }}
  OPENSEA_API_KEY: ${{ secrets.OPENSEA_API_KEY }}
  SUBGRAPH_API_MAINNET_URL: ${{ inputs.use_prod_apis && secrets.SUBGRAPH_API_MAINNET_URL || secrets.SUBGRAPH_API_MAINNET_URL_STAGING }}
  SUBGRAPH_API_RINKEBY_URL: ${{ inputs.use_prod_apis && secrets.SUBGRAPH_API_RINKEBY_URL || secrets.SUBGRAPH_API_RINKEBY_URL_STAGING }}
  TESTS_WALLET_ADDRESS: ${{ secrets.TESTS_WALLET_ADDRESS }}
  TESTS_WHALE_WALLET_ADDRESSES: ${{ secrets.TESTS_WHALE_WALLET_ADDRESSES }}
  TESTS_WALLET_PRIVATE_KEY: ${{ secrets.TESTS_WALLET_PRIVATE_KEY }}
jobs:
  default:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ inputs.push && fromJSON(steps.meta.outputs.json).tags[0] || '' }}
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          ref: ${{ inputs.checkout_ref }}
      - name: Set env
        id: env
        run: |
          echo "::set-output name=build_number::$(git rev-parse --short HEAD).$(git rev-list --count ${{ github.ref }})"
      - name: Authenticate Google Cloud
        id: gcloud
        uses: google-github-actions/auth@v0
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACC }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.gcloud.outputs.access_token }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build test target
        uses: docker/build-push-action@v2
        with:
          build-args: BUILD_NUMBER=${{ steps.env.outputs.build_number }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          load: true
          push: false
          tags: ${{ inputs.image_name }}:test-${{ github.sha }}
          target: test
      - name: Run tests
        env:
          IMAGE_NAME: ${{ inputs.image_name }}
          IMAGE_TAG: test-${{ github.sha }}
        run: docker-compose -f docker-compose.test.yml up --exit-code-from app
      - name: Set metadata
        id: meta
        uses: docker/metadata-action@v3
        if: ${{ inputs.push }}
        with:
          images: ${{ inputs.image_name }}
          tags: |
            type=sha,prefix=,format=short,priority=1000,suffix=${{ !endsWith(github.ref, github.event.repository.default_branch) && format('-{0}', github.ref_name) || '' }}
            type=raw,value=latest,suffix=${{ !endsWith(github.ref, github.event.repository.default_branch) && format('-{0}', github.ref_name) || '' }}
      - name: Build release target
        uses: docker/build-push-action@v2
        with:
          build-args: BUILD_NUMBER=${{ steps.env.outputs.build_number }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          target: release
